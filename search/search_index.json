{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>IBM Research</p> <p>Open Accelerated Discovery</p>"},{"location":"#open-sourcemolecular-materialsresearch-toolkit","title":"Open SourceMolecular &amp; MaterialsResearch Toolkit","text":"<p> OpenAD is an intuitive toolkit that simplifies access to a variety of AI models and services for scientific discovery. Together with its convenient visualisation capabilities, OpenAD empowers scientists across industries to enhance their discovery process. </p> <p>  Install for free Documentation Tutorials</p>"},{"location":"about/","title":"About OpenAD","text":"<p>OpenAD is an open-source toolkit for molecular and materials discovery. It is being developed at IBM Research and was launched in November 2023.</p>"},{"location":"about/#feedback","title":"Feedback","text":"<ul> <li>Feedback and questions: Get it touch </li> <li>Feature requests &amp; bug reports: Create issue on GitHub</li> </ul>"},{"location":"about/#team","title":"Team","text":"<p>Srikanth Koneru Product and Engineering Lead</p> <p>Phil Downey Product Manager</p> <p>Dean Elzinga Research Software Engineer / Data Science</p> <p>Daniel Choi Software Engineer (MLOps)</p> <p>Brian Deuenas Research Software Developer</p> <p>Moenen Erbuer Interface and Experience Lead</p>"},{"location":"style-reference/","title":"Custom Page Title","text":""},{"location":"style-reference/#header-one","title":"Header One","text":""},{"location":"style-reference/#header-two","title":"Header Two","text":""},{"location":"style-reference/#header-three","title":"Header Three","text":""},{"location":"style-reference/#header-four","title":"Header Four","text":""},{"location":"style-reference/#header-five","title":"Header Five","text":""},{"location":"style-reference/#header-six-lorem-ipsum-dolor-sit-amet","title":"Header Six Lorem Ipsum Dolor sit Amet","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam gravida gravida euismod. Aliquam erat volutpat. In at viverra ligula. Ut vitae sollicitudin tortor. Duis varius ultrices augue id feugiat. Morbi sed sapien tellus. Ut gravida ultricies interdum. Nam fermentum, risus et lacinia condimentum, nunc sem convallis sapien, non tempus tortor sem sed purus. Mauris vitae leo tortor. Nulla ac urna elit. Suspendisse mi arcu, placerat ut dui at, convallis dapibus diam. Cras libero purus, commodo quis libero a, fermentum consectetur ante.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam gravida gravida euismod. Aliquam erat volutpat. In at viverra ligula. Ut vitae sollicitudin tortor. Duis varius ultrices augue id feugiat. Morbi sed sapien tellus. Ut gravida ultricies interdum. Nam fermentum, risus et lacinia condimentum, nunc sem convallis sapien, non tempus tortor sem sed purus. Mauris vitae leo tortor. Nulla ac urna elit. Suspendisse mi arcu, placerat ut dui at, convallis dapibus diam. Cras libero purus, commodo quis libero a, fermentum consectetur ante.</p> Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam gravida gravida euismod. Aliquam erat volutpat. Ut vitae sollicitudin tortor. Duis varius ultrices augue id feugiat. Morbi sed sapien tellus. Ut gravida ultricies interdum. Nam fermentum, risus et lacinia condimentum, nunc sem convallis sapien, non tempus tortor sem sed purus. Mauris vitae leo tortor. Nulla ac urna elit. Suspendisse mi arcu, placerat ut dui at, convallis dapibus diam. Cras libero purus, commodo quis libero a, fermentum consectetur ante. <p>Primary Button Secondary Button Tertiary Button</p> <p>  Primary Button  Secondary Button  Tertiary Button</p> <p>Primary Button Secondary Button Tertiary Button</p> <p>Unique link</p> <p>Repeated link / Repeated link / Repeated link</p> <p> </p> <p>  I'm an inline icon</p> <p>  I'm an inline icon in small text</p> <p>Flag Flag Flag Flag Flag Flag</p>"},{"location":"style-reference/#im-an-header-1-inline-flag-flag","title":"I'm an Header 1 inline flag Flag","text":""},{"location":"style-reference/#im-an-header-2-inline-flag-flag","title":"I'm an Header 2 inline flag Flag","text":""},{"location":"style-reference/#im-an-header-3-inline-flag-flag","title":"I'm an Header 3 inline flag FlagExpandabable Section Header","text":"<p>I'm a regular text flag inline</p> <p>I'm a small text flag <code>inline next to code</code></p> <p></p> <p></p> <p></p> <p></p> <p>\u2191 Up arrow \u2193 Down arrow \u2190 Left arrow \u2192 Right arrow \u2194 Double headed arrow  </p> Syntax Description Header Title Paragraph Text <p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Abstract</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Info</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Tip</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Success</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Question</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Warning</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Failure</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Danger</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Bug</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Example</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Quote</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Expandable section <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam gravida gravida euismod. Aliquam erat volutpat. In at viverra ligula. Ut vitae sollicitudin tortor. Duis varius ultrices augue id feugiat. Morbi sed sapien tellus. Ut gravida ultricies interdum. Nam fermentum, risus et lacinia condimentum, nunc sem convallis sapien, non tempus tortor sem sed purus. Mauris vitae leo tortor. Nulla ac urna elit. Suspendisse mi arcu, placerat ut dui at, convallis dapibus diam. Cras libero purus, commodo quis libero a, fermentum</p> <p>Note: expanding headers are not picked up by the table of contents, nor are markdown rules applied inside.</p> Expandabable Section Header <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam gravida gravida euismod. Aliquam erat volutpat. In at viverra ligula. Ut vitae sollicitudin tortor. Duis varius ultrices augue id feugiat. Morbi sed sapien tellus. Ut gravida ultricies interdum. Nam fermentum, risus et lacinia condimentum, nunc sem convallis sapien, non tempus tortor sem sed purus. Mauris vitae leo tortor. Nulla ac urna elit. Suspendisse mi arcu, placerat ut dui at, convallis dapibus diam. Cras libero purus, commodo quis libero a, fermentum consectetur ante.</p> <p>Note: expanding headers are not picked up by the table of contents, nor are markdown rules applied inside.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam gravida gravida euismod. Aliquam erat volutpat. In at viverra ligula. Ut vitae sollicitudin tortor. Duis varius ultrices augue id feugiat. Morbi sed sapien tellus. Ut gravida ultricies interdum. Nam fermentum, risus et lacinia condimentum, nunc sem convallis sapien, non tempus tortor sem sed purus. Mauris vitae leo tortor. Nulla ac urna elit. Suspendisse mi arcu, placerat ut dui at, convallis dapibus diam. Cras libero purus, commodo quis libero a, fermentum consectetur ante.</p> <p>Note: expanding headers are not picked up by the table of contents, nor are markdown rules applied inside.</p> Expandabable Section Header <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam gravida gravida euismod. Aliquam erat volutpat. In at viverra ligula. Ut vitae sollicitudin tortor. Duis varius ultrices augue id feugiat. Morbi sed sapien tellus. Ut gravida ultricies interdum. Nam fermentum, risus et lacinia condimentum, nunc sem convallis sapien, non tempus tortor sem sed purus. Mauris vitae leo tortor. Nulla ac urna elit. Suspendisse mi arcu, placerat ut dui at, convallis dapibus diam. Cras libero purus, commodo quis libero a, fermentum consectetur ante.</p> <p>Note: expanding headers are not picked up by the table of contents, nor are markdown rules applied inside.</p> Expandabable Section Header <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam gravida gravida euismod. Aliquam erat volutpat. In at viverra ligula. Ut vitae sollicitudin tortor. Duis varius ultrices augue id feugiat. Morbi sed sapien tellus. Ut gravida ultricies interdum. Nam fermentum, risus et lacinia condimentum, nunc sem convallis sapien, non tempus tortor sem sed purus. Mauris vitae leo tortor. Nulla ac urna elit. Suspendisse mi arcu, placerat ut dui at, convallis dapibus diam. Cras libero purus, commodo quis libero a, fermentum consectetur ante.</p> <p>Note: expanding headers are not picked up by the table of contents, nor are markdown rules applied inside.</p>"},{"location":"style-reference/#code-preview","title":"Code Preview","text":"<p>Some text</p>"},{"location":"style-reference/#sub-sub-title","title":"Sub-sub title","text":"<p>Code block python:</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam gravida gravida euismod. Aliquam erat volutpat. In at viverra ligula. Ut vitae sollicitudin tortor. Duis varius ultrices augue id feugiat. Morbi sed sapien tellus. Ut gravida ultricies interdum. Nam fermentum, risus et lacinia condimentum, nunc sem convallis sapien, non tempus tortor sem sed purus. Mauris vitae leo tortor. Nulla ac urna elit. Suspendisse mi arcu, placerat ut dui at, convallis dapibus diam. Cras libero purus, commodo quis libero a, fermentum consectetur ante.</p> <p>Note: expanding headers are not picked up by the table of contents, nor are markdown rules applied inside.</p> Python<pre><code>import os\n\nhello = 123\nprint(hello)\n\ndef test(foo=123):\n    \"\"\"\n    Hello\n    \"\"\"\n    if hello == foo:\n        return True\n\ninp = None\ndefault_path = os.path.expanduser(\"~/.ipython/profile_default/startup\")****\nif not os.path.exists(default_path):\n    os.mkdir(default_path)\n</code></pre> <p>Code block JS:</p> JavaScript<pre><code>const hello = \"world\"\n</code></pre> <p>Code block CLI</p> Bash<pre><code>pip install openad\n</code></pre>"},{"location":"style-reference/#header-with-paragraph-one","title":"Header with Paragraph One","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam gravida gravida euismod. Aliquam erat volutpat. In at viverra ligula. Ut vitae sollicitudin tortor. Duis varius ultrices augue id feugiat. Morbi sed sapien tellus. Ut gravida ultricies interdum. Nam fermentum, risus et lacinia condimentum, nunc sem convallis sapien, non tempus tortor sem sed purus. Mauris vitae leo tortor. Nulla ac urna elit. Suspendisse mi arcu, placerat ut dui at, convallis dapibus diam. Cras libero purus, commodo quis libero a, fermentum consectetur ante.</p>"},{"location":"style-reference/#header-with-paragraph-two","title":"Header with Paragraph Two","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam gravida gravida euismod. Aliquam erat volutpat. In at viverra ligula. Ut vitae sollicitudin tortor. Duis varius ultrices augue id feugiat. Morbi sed sapien tellus. Ut gravida ultricies interdum. Nam fermentum, risus et lacinia condimentum, nunc sem convallis sapien, non tempus tortor sem sed purus. Mauris vitae leo tortor. Nulla ac urna elit. Suspendisse mi arcu, placerat ut dui at, convallis dapibus diam. Cras libero purus, commodo quis libero a, fermentum consectetur ante.</p>"},{"location":"style-reference/#header-with-paragraph-three","title":"Header with Paragraph Three","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam gravida gravida euismod. Aliquam erat volutpat. In at viverra ligula. Ut vitae sollicitudin tortor. Duis varius ultrices augue id feugiat. Morbi sed sapien tellus. Ut gravida ultricies interdum. Nam fermentum, risus et lacinia condimentum, nunc sem convallis sapien, non tempus tortor sem sed purus. Mauris vitae leo tortor. Nulla ac urna elit. Suspendisse mi arcu, placerat ut dui at, convallis dapibus diam. Cras libero purus, commodo quis libero a, fermentum consectetur ante.</p>"},{"location":"style-reference/#header-with-paragraph-four","title":"Header with Paragraph Four","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam gravida gravida euismod. Aliquam erat volutpat. In at viverra ligula. Ut vitae sollicitudin tortor. Duis varius ultrices augue id feugiat. Morbi sed sapien tellus. Ut gravida ultricies interdum. Nam fermentum, risus et lacinia condimentum, nunc sem convallis sapien, non tempus tortor sem sed purus. Mauris vitae leo tortor. Nulla ac urna elit. Suspendisse mi arcu, placerat ut dui at, convallis dapibus diam. Cras libero purus, commodo quis libero a, fermentum consectetur ante.</p>"},{"location":"style-reference/#header-with-paragraph-five","title":"Header with Paragraph Five","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam gravida gravida euismod. Aliquam erat volutpat. In at viverra ligula. Ut vitae sollicitudin tortor. Duis varius ultrices augue id feugiat. Morbi sed sapien tellus. Ut gravida ultricies interdum. Nam fermentum, risus et lacinia condimentum, nunc sem convallis sapien, non tempus tortor sem sed purus. Mauris vitae leo tortor. Nulla ac urna elit. Suspendisse mi arcu, placerat ut dui at, convallis dapibus diam. Cras libero purus, commodo quis libero a, fermentum consectetur ante.</p>"},{"location":"style-reference/#header-with-paragraph-six","title":"Header with Paragraph Six","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam gravida gravida euismod. Aliquam erat volutpat. In at viverra ligula. Ut vitae sollicitudin tortor. Duis varius ultrices augue id feugiat. Morbi sed sapien tellus. Ut gravida ultricies interdum. Nam fermentum, risus et lacinia condimentum, nunc sem convallis sapien, non tempus tortor sem sed purus. Mauris vitae leo tortor. Nulla ac urna elit. Suspendisse mi arcu, placerat ut dui at, convallis dapibus diam. Cras libero purus, commodo quis libero a, fermentum consectetur ante.</p>"},{"location":"_snippets/CLI_VS_JUP/","title":"CLI VS JUP","text":"<p>Note</p> <p>To run this tutorial from a Jupyter Notebook, make sure to enable OpenAD magic commands and prepend every command with <code>%openad</code>.</p>"},{"location":"_snippets/CONTINUE_LEARNING_PROTEINS/","title":"CONTINUE LEARNING PROTEINS","text":""},{"location":"_snippets/CONTINUE_LEARNING_PROTEINS/#continue-learning","title":"Continue Learning","text":"<p>Want to learn more about how to work with proteins in OpenAD? Check out the other protein tutorials.</p>"},{"location":"_snippets/CONTINUE_LEARNING_SMOLS/","title":"CONTINUE LEARNING SMOLS","text":""},{"location":"_snippets/CONTINUE_LEARNING_SMOLS/#continue-learning","title":"Continue Learning","text":"<p>Want to learn more about how to work with small molecules in OpenAD? Check out the other small molecule tutorials.</p>"},{"location":"_snippets/INSTALL_OPENAD/","title":"INSTALL OPENAD","text":""},{"location":"_snippets/INSTALL_OPENAD/#install-openad","title":"Install OpenAD","text":"<p>Find more detailed installation instructions here.</p> Bash<pre><code>pip install openad\n</code></pre>"},{"location":"_snippets/INSTALL_OPENAD_JUP/","title":"INSTALL OPENAD JUP","text":""},{"location":"_snippets/INSTALL_OPENAD_JUP/#install-openad","title":"Install OpenAD","text":"<p>If you haven't already, install OpenAD and activate the OpenAD magic commands.</p>"},{"location":"_snippets/JUP_VS_CLI/","title":"JUP VS CLI","text":"<p>Note</p> <p>While this tutorial is about Jupyter Notebook, it can just as well be applied to the command line, simply omit the <code>%openad</code> magic command prefix.</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2024/08/01/unlocking-the-power-of-open-accelerated-discovery/","title":"Unlocking the Power of Open Accelerated Discovery","text":"<p>In the rapidly evolving landscape of scientific research, the need for accelerated discovery has never been more pressing.</p> <p>With the increasing complexity of molecular systems and the growing importance of data-driven decision-making, researchers are seeking innovative ways to streamline their workflows and unlock new insights.</p> <p>Enter Open Accelerated Discovery (OpenAD), a revolutionary open-source framework that integrates cutting-edge tools, models, and applications into a single, user-friendly platform. By leveraging the power of AI, machine learning, and advanced computing, OpenAD empowers scientists to accelerate their discovery processes, reduce costs, and enhance productivity.</p>"},{"location":"blog/2024/08/01/unlocking-the-power-of-open-accelerated-discovery/#what-is-openad","title":"What is OpenAD?","text":"<p>OpenAD is an open-source project that democratizes IBM's research in machine learning and advanced compute for molecular discovery. This framework provides a low-code offering that delivers accelerators to your molecular discovery, making it easy to deploy scientific AI models and integrate them into your workflow.</p> <p>With OpenAD, researchers can combine resources from IBM, third-party projects, open-source libraries, or their own custom toolkits into a single pipeline. This flexibility enables scientists to orchestrate their workflows from start to finish, cataloging user-defined or open-source model services, launching and managing model services, and lowering costs of managing services.</p>"},{"location":"blog/2024/08/01/unlocking-the-power-of-open-accelerated-discovery/#key-features-of-openad","title":"Key Features of OpenAD","text":"<ul> <li>Model Service: Easily deploy scientific AI models without custom-engineered environments.</li> <li>Visualization Tools: Visualize molecules and their properties, view and subset molecules to work with.</li> <li>Built-in Help: In-application help with automated population for chosen model services, including LLM-assisted help powered by IBM Granite LLM on Ollama.</li> <li>Collaboration: Exchange data with other researchers. Easily export and import data and share with others.</li> <li>Data Management: Organize data in project workspaces.</li> </ul>"},{"location":"blog/2024/08/01/unlocking-the-power-of-open-accelerated-discovery/#property-generation-capabilities-from-base-models","title":"Property Generation Capabilities from Base Models","text":"<p>OpenAD provides a wide range of property generation capabilities from base models, including:</p> <ul> <li>Molecules: molecular weight, number of aromatic rings, number of H-acceptors, etc.</li> <li>Proteins: charge density, protein weight, isoelectric point, etc.</li> <li>Crystals: absolute energy, bulk moduli, Poisson ratio, etc.</li> <li>Dataset generators/transformer generation models</li> </ul> <p>OpenAD includes a variety of data set generators and transformer generation models, such as:</p> <ul> <li>PaccMannVAEGenerator</li> <li>MoLeRDefaultGenerator</li> <li>TorchDrugGraphAF</li> <li>TorchDrugGCPN</li> <li>Conditional Generation</li> </ul> <p>OpenAD also supports conditional generation, with models like:</p> <ul> <li>AaeGenerator</li> <li>PaccMannRLProteinBasedGenerator</li> <li>RegressionTransformerProteins</li> <li>RegressionTransformerMolecule</li> <li>Controlled Sampling</li> </ul> <p>Finally, OpenAD includes controlled sampling capabilities, such as the CatalystGenerator.</p>"},{"location":"blog/2024/08/01/unlocking-the-power-of-open-accelerated-discovery/#advantages-of-openad","title":"Advantages of OpenAD","text":"<ul> <li>Easy Deployment: Automate access and deployment of scientific models on the cloud without custom-engineered environments.</li> <li>Faster Iteration: Accelerate machine learning pipeline development.</li> <li>Access to Research Assets: Access scientific research assets through Deep Search, PubChem data, scientific patents, and research papers.</li> <li>Orchestrating Tools and Projects</li> </ul> <p>OpenAD enables researchers to create and manage project workspaces, manage molecular data sets, enrich with model or external data, and integrate with existing tools and processes (e.g., Jupyter notebooks).</p>"},{"location":"blog/2024/08/01/unlocking-the-power-of-open-accelerated-discovery/#conclusion","title":"Conclusion","text":"<p>Open Accelerated Discovery is a game-changing framework that empowers scientists to accelerate their discovery processes, reduce costs, and enhance productivity. By leveraging the power of AI, machine learning, and advanced computing, OpenAD provides a low-code offering that delivers accelerators to molecular discovery, making it easy to deploy scientific AI models and integrate them into your workflow.</p> <p>Whether you're a researcher looking to streamline your workflows or an entrepreneur seeking innovative solutions, OpenAD is an open-source project that democratizes IBM's research in machine learning and advanced compute for molecular discovery. Join the community today and unlock the power of accelerated discovery! For more information visit https://accelerate.science/projects/openad.</p>"},{"location":"blog/2024/09/18/what-is-openad/","title":"What is OpenAD?","text":"<p>OpenAD is a technical framework for molecular discovery. A new approach for providing easy access to machine learning tools for computational chemists. Since it is so unique, explaining what it is can sometimes be challenging.</p> <p>Let\u2019s break down what \u201cframework for molecular discovery\u201d means.</p> <p>\u201cMolecular discovery\u201d refers to the tools that are used within OpenAD. For the most part these tools consist of machine learning models that are built for the purpose of predicting chemical reactions and properties. Using these models, you can do things like retrosynthesis prediction (i.e., taking a molecule and working backwards to predict the reagents and reactions that created it) and forward prediction, where you give a model a set of reagents and ask it to predict the final products. You can also use OpenAD to compute specific properties of molecules (e.g., molecular weight, number of aromatic rings, number of hydrogen acceptors or donors), proteins (e.g., charge density, protein weight), crystals (e.g., absolute energy, Poisson ratio, formation energy), and properties generated from MolFormer models. OpenAD gives you a convenient and consistent environment to deploy and use these machine learning tools.</p> <p>Normally, this type of molecular discovery requires work from different technical disciplines, like cloud computing and system administration. You have to set up a lot of different tools and platforms just to get started. Maintaining and updating these programs also becomes a challenge.</p> <p>To use an analogy, let\u2019s say you\u2019re a new executive chef of a new and expensive Italian restaurant. However, you are surprised to learn that your new job includes responsibility for constructing the physical building, kitchen, and dining area. You would much rather spend your time working with your preferred tools and ingredients. Much like a chef with a restaurant space already built, you can use OpenAD as the framework for organizing and using your tools to create and analyze chemical reactions however required. You can be creative and explore results with many different models, or you can define model workflows that can be used on an industrial scale. All of this is possible with OpenAD.</p> <p>OpenAD is a game-changing, open-source framework that democratizes IBM\u2019s research in machine learning and advanced compute for molecular discovery. This powerful tool provides a simple, command-driven solution that accelerates your molecular research by delivering:</p> <ul> <li>Easy-to-use AI models: Deploy scientific AI models directly into your Jupyter or application workflows using a domain-specific command language.</li> <li>Molecular data awareness: Manage, subset, and visualize molecule sets in notebooks or applications with seamless integration of services like PubChem, Deep Search, and RXN.</li> <li>Federated model and information services: Integrate a wide range of Model and Information services into your Discovery workflow, enriching your research with patent, research paper, and reaction prediction information.</li> <li>Option of Secure Service Delivery: While OpenAD is a open source project it has the ability for you to host and securely lock away your model assets that contain proprietary or confidential information behind a secure firewall, whether that is deployed and hosted by IBM or within your own environment, making it easy to transition from open source to confidential deployments.</li> <li>Open Source Platform: Strategic alignment with the AI Alliance to provide transparent, safe, reliable, and open source tools for science.</li> </ul> <p>With OpenAD, you can combine resources from IBM, third-party projects, open-source libraries, or custom tool kits into a single pipeline. This flexibility enables you to:</p> <ul> <li>Orchestrate workflows: Catalog user-defined or open-source model services, launch and manage model services, and lower costs of managing services.</li> <li>Build new pipelines: Design OpenAD as the foundation for building new workflows from scratch.</li> </ul> <p>You can learn more about OpenAD and download the free OpenAD Toolkit by visiting https://accelerate.science/projects/openad.</p>"},{"location":"blog/2024/10/30/reinvent4-molecular-discovery-app-now-available-via-openad/","title":"REINVENT4 Molecular Discovery App Now Available via OpenAD","text":"<p>The REINVENT4 molecular discovery tool has recently been incorporated into the Open Accelerated Discovery (OpenAD) framework by use of the OpenAD Service Utilities.</p> <p>The benefits of this new capability include ease of setup and use, no need to purchase and maintain expensive hardware to run machine learning models, easier scalability on cloud hosting platforms, and easier collaboration with other researchers.</p> <p>In this blog post, we'll provide a summary of:</p> <ul> <li>The OpenAD framework, which includes an OpenAD Toolkit for users and the OpenAD Service Utilities for developers.</li> <li>The deployment of the REINVENT4 molecular discovery tool within then OpenAD framework.</li> </ul>"},{"location":"blog/2024/10/30/reinvent4-molecular-discovery-app-now-available-via-openad/#what-is-openad","title":"What is OpenAD?","text":"<p>OpenAD is a framework for hosting and utilizing machine learning tools for molecular discovery. The hosting of molecular discovery tools within OpenAD allows researchers to easily collaborate with others by sharing their tools and allowing other researchers to access tools via the OpenAD Toolkit or other client software. Also, individual tools can be incorporated into a workflow, where the output from one tool can be used as the input for another.</p> <p>The OpenAD Service Utilities are part of OpenAD and allow developers an easy way to build and deploy a REST API to provide access to almost any molecular discovery tool. With the OpenAD Service Utilities, developers can easily build and deploy a REST API to access machine learning tools specific to molecular discovery (e.g., identifying molecular properties or generating molecular structures). The most impressive feature of the OpenAD Service Utilities is that they can be used to incorporate virtually any molecular discovery tool into the OpenAD framework.</p>"},{"location":"blog/2024/10/30/reinvent4-molecular-discovery-app-now-available-via-openad/#reinvent4","title":"REINVENT4","text":"<p>We have used the OpenAD Service Utilities to deploy a REST API for the REINVENT4 molecular discovery tool set.</p> <p>REINVENT is a molecular design tool for de novo design, scaffold hopping, R-group replacement, linker design, molecule optimization, and other small molecule design tasks. REINVENT uses a Reinforcement Learning (RL) algorithm to generate optimized molecules compliant with a user defined property profile defined as a multi-component score. Transfer Learning (TL) can be used to create or pre-train a model that generates molecules closer to a set of input molecules. A paper describing the software has been published as Open Access in the Journal of Cheminformatics.</p> <p>REINVENT4 is a command line Python application that includes machine learning models used during its analyses. Using the OpenAD Service Utilities, we have taken this command line app and made it available via a REST API, providing researchers with significant benefits:</p> <ul> <li>The configuration settings used by the REST API are identical to the ones used by the command line tool, making it easier for researchers to switch from the command line to the REST API.</li> <li>Another obvious benefit of the REST API is that researchers do not need to maintain expensive GPU hardware in order to utilize REINVENT4.</li> <li>The wrapper code for REINVENT4 can be containerized and deployed on RedHat OpenShift or other host platforms. This makes it easier to scale up the use of REINVENT4 without the need for more expensive hardware.</li> <li>The REST API makes it easier to collaborate with researchers across the globe, while ensuring that all collaborators are using the same versions of the same models.</li> </ul> <p>The code for the REINVENT4 OpenAD Service Utilities wrapper and a tutorial on its use will be available very soon. When released we will announce it here on this blog.</p> <p>For more information on OpenAD and IBM Accelerated Discovery offerings, visit https://accelerate.science.</p>"},{"location":"blog/2025/03/24/how-to-visualize-proteins-in-jupyter-notebook/","title":"How to Visualize Proteins in Jupyter Notebook","text":"<p>Learn how to use OpenAD to visualize proteins and other macromolecules from:</p> <ul> <li>PDB or CIF files</li> <li>FASTA strings</li> </ul>"},{"location":"blog/2025/03/24/how-to-visualize-proteins-in-jupyter-notebook/#install-openad","title":"Install OpenAD","text":"<p>If you haven't already, install OpenAD and activate the OpenAD magic commands.</p> <p>Note</p> <p>While this tutorial is about Jupyter Notebook, it can just as well be applied to the command line, simply omit the <code>%openad</code> magic command prefix.</p>"},{"location":"blog/2025/03/24/how-to-visualize-proteins-in-jupyter-notebook/#visualizing-pdf-and-cif-files","title":"Visualizing PDF and CIF Files","text":"<p>Let's start with downloading some sample proteins:</p> <ul> <li>2g64.cif</li> <li>9bq4.pdb</li> </ul> <p>In order to visualize a PDF or CIF file, all we need to do is to import them into your workspace. Update the source paths if needed.</p> Bash<pre><code>%openad import from '~/Downloads/2g64.cif' to '2g64.cif'\n%openad import from '~/Downloads/9bq4.pdb' to '9bq4.pdb'\n</code></pre> <p>Then simply open them:</p> Bash<pre><code>%openad open '2g64.cif'\n%openad open '9bq4.pdb'\n</code></pre> <p>Alternatively, you can open your workspace and double click on your protein files from there.</p> Bash<pre><code>%openad launch gui\n</code></pre> <p>Inside the macromolecule viewer, you'll find a 3D visualization as well as the most important information from the PDB.</p> <p></p> <p></p> <p></p> <p>If you need to see more details or get access to more advanced renderings, there's a link to  the molecule's PDB entry page.</p> <p></p>"},{"location":"blog/2025/03/24/how-to-visualize-proteins-in-jupyter-notebook/#continue-learning","title":"Continue Learning","text":"<p>Want to learn more about how to work with proteins in OpenAD? Check out the other protein tutorials.</p>"},{"location":"blog/2025/03/25/how-to-import-proteins-from-the-protein-data-bank/","title":"How to Import Proteins from the Protein Data Bank","text":"<p>Learn how to use OpenAD to easily import protein data from the RCSB Protein Data Bank using a protein's PDB ID or FASTA string.</p>"},{"location":"blog/2025/03/25/how-to-import-proteins-from-the-protein-data-bank/#install-openad","title":"Install OpenAD","text":"<p>Find more detailed installation instructions here.</p> Bash<pre><code>pip install openad\n</code></pre> <p>Note</p> <p>To run this tutorial from a Jupyter Notebook, make sure to enable OpenAD magic commands and prepend every command with <code>%openad</code>.</p>"},{"location":"blog/2025/03/25/how-to-import-proteins-from-the-protein-data-bank/#importing-a-protein","title":"Importing a Protein","text":"<p>First we visualize a protein, either by its PDB id, or by searching for a FASTA string:</p> Bash<pre><code>show protein '9J4J'\n</code></pre> Bash<pre><code>show protein 'MSLNRHFTVSVFIVCKDKVLLHLHKKAKKMLPLGGHIEVNELPEEACIREAKEEAGLNVTLYNPIDINLKKSCDLSGEKLLINPIHTILGDVSPNHSHIDFVYYATTTSFETSPEIGESKILKWYSKEDLKNAHNIQENILVMATEALDLLEGHHHHHH'\n</code></pre> <p>This will open the protein in the macromolecule viewer, from where you can save it to your workspace.</p> <p></p> <p></p>"},{"location":"blog/2025/03/25/how-to-import-proteins-from-the-protein-data-bank/#continue-learning","title":"Continue Learning","text":"<p>Want to learn more about how to work with proteins in OpenAD? Check out the other protein tutorials.</p>"},{"location":"blog/2025/03/17/how-to-visualize-a-molecule-in-jupyter-notebook/","title":"How to Visualize a Molecule in Jupyter Notebook","text":"<p>Learn how to use OpenAD to visualize a molecule in 2D and 3D from a SMILES, InChI, InChIKey, name or PubChem ID.</p>"},{"location":"blog/2025/03/17/how-to-visualize-a-molecule-in-jupyter-notebook/#install-openad","title":"Install OpenAD","text":"<p>If you haven't already, install OpenAD and activate the OpenAD magic commands.</p> <p>Note</p> <p>While this tutorial is about Jupyter Notebook, it can just as well be applied to the command line, simply omit the <code>%openad</code> magic command prefix.</p>"},{"location":"blog/2025/03/17/how-to-visualize-a-molecule-in-jupyter-notebook/#visualizing-a-single-molecule","title":"Visualizing a Single Molecule","text":"<p>You can also visualize a batch of molecules from a list or DataFrame, or from an SDF or CSV file.</p> Bash<pre><code>%openad show molecule 'C1=CC(=C(C=C1CCN)O)O'\n</code></pre> <p></p> <p>That was easy. And you can use any type of molecular identifier:  </p> <ul> <li>SMILES  </li> <li>InChI  </li> </ul> <p>.. and if the molecule exists on PubChem:</p> <ul> <li>InChIKey</li> <li>name</li> <li>PubChem CID</li> </ul> <p>Bash<pre><code>%openad show molecule InChI=1S/C8H8/c1-2-5-3(1)7-4(1)6(2)8(5)7/h1-8H\n</code></pre> Bash<pre><code>%openad show molecule WAYJCOBMBRPWED-KWCYVHTRSA-N\n</code></pre> Bash<pre><code>%openad show molecule rubber\n</code></pre> Bash<pre><code>%openad show molecule 2854\n</code></pre></p>"},{"location":"blog/2025/03/17/how-to-visualize-a-molecule-in-jupyter-notebook/#continue-learning","title":"Continue Learning","text":"<p>Want to learn more about how to work with small molecules in OpenAD? Check out the other small molecule tutorials.</p>"},{"location":"blog/2025/03/18/how-to-visualize-sdf-files-and-other-molecular-file-formats/","title":"How to Visualize SDF files and Other Molecular File Formats","text":"<p>Learn how to use OpenAD to visualize the contents of different molecular file formats in a convenient molecule grid.</p> <p>Supported file formats are SDF, CSV, SMI and MOL.</p>"},{"location":"blog/2025/03/18/how-to-visualize-sdf-files-and-other-molecular-file-formats/#install-openad","title":"Install OpenAD","text":"<p>Find more detailed installation instructions here.</p> Bash<pre><code>pip install openad\n</code></pre> <p>Note</p> <p>To run this tutorial from a Jupyter Notebook, make sure to enable OpenAD magic commands and prepend every command with <code>%openad</code>.</p>"},{"location":"blog/2025/03/18/how-to-visualize-sdf-files-and-other-molecular-file-formats/#visualize-molecule-files","title":"Visualize Molecule Files","text":"<p>You can also visualize a batch of molecules from a list or DataFrame or individually by identifier.</p> <p>Let's start with downloading a sample for each of our supported file formats:</p> <ul> <li>SDF file: sample_molecules1.sdf</li> <li>CSV file: sample_molecules2.csv</li> <li>SMI file: sample_molecules3.smi</li> <li>MOL file: geraniol.mol</li> </ul> <p>Now copy the files over to your workspace. Update the source paths if needed.</p> Bash<pre><code>import from '~/Downloads/sample_molecules1.sdf' to 'sample_molecules1.sdf'\nimport from '~/Downloads/sample_molecules2.csv' to 'sample_molecules2.csv'\nimport from '~/Downloads/sample_molecules3.smi' to 'sample_molecules3.smi'\nimport from '~/Downloads/geraniol.mol' to 'geraniol.mol'\n</code></pre> <p>You should get a success message if they're copied over successfully. You can check by listing the files in your workspace:</p> Bash<pre><code>list files\n</code></pre> <p>Next, you can simply open the files to see the molecules inside.</p> Bash<pre><code>open 'sample_molecules1.sdf'\n</code></pre> Bash<pre><code>open 'sample_molecules2.csv'\n</code></pre> Bash<pre><code>open 'sample_molecules3.smi'\n</code></pre> Bash<pre><code>open 'geraniol.mol'\n</code></pre> <p></p> <p>This works both from the command line or from a Jupyter Notebook:</p> Bash<pre><code>%openad open 'sample_molecules1.sdf'\n</code></pre> <p></p> <p>From here, you can open a molecule to see more details and a 3D visualization. You can even enrich a molecule by fetching data from PubChem.</p> <p></p> <p>To learn how to combine molecules from different files and manipulate them together, you may want to learn about working with the molecule working set.</p>"},{"location":"blog/2025/03/18/how-to-visualize-sdf-files-and-other-molecular-file-formats/#continue-learning","title":"Continue Learning","text":"<p>Want to learn more about how to work with small molecules in OpenAD? Check out the other small molecule tutorials.</p>"},{"location":"blog/2025/03/19/visualizing-molecules-in-jupyter-notebook-from-a-list-or-dataframe/","title":"Visualizing Molecules in Jupyter Notebook from a List or DataFrame","text":"<p>Learn how to use OpenAD in Juptyter Notebook to visualize a list of SMILES or InChI strings.</p>"},{"location":"blog/2025/03/19/visualizing-molecules-in-jupyter-notebook-from-a-list-or-dataframe/#install-openad","title":"Install OpenAD","text":"<p>If you haven't already, install OpenAD and activate the OpenAD magic commands.</p> <p>Note</p> <p>While this tutorial is about Jupyter Notebook, it can just as well be applied to the command line, simply omit the <code>%openad</code> magic command prefix.</p>"},{"location":"blog/2025/03/19/visualizing-molecules-in-jupyter-notebook-from-a-list-or-dataframe/#visualizing-a-list-of-molecules","title":"Visualizing a List of Molecules","text":"<p>You can also visualize a batch of molecules from an SDF or CSV file or individually by identifier.</p> <p>In practice, the output from a model or other tool will often result in a large batch of molecule identifiers stored in a list of DataFrame. OpenAD makes it easy to evaluate these results by visualizing them without the need of first storing them to disk.</p> <p>For this demo, we'll start with a list of SMILES (InChI are also supported) of common hormones and convert them into a Pandas DataFrame with a \"smiles\" column.</p> Bash<pre><code>import pandas as pd\nmy_mols = [\n    'C[C@]12CCC(=O)C=C1CC[C@@H]3[C@@H]2[C@H](C[C@]4([C@H]3CC[C@@H]4C(=O)CO)C=O)O',\n    'C[C@]12CCC(=O)C=C1CC[C@@H]3[C@@H]2[C@H](C[C@]4([C@H]3CC[C@@]4(C(=O)CO)O)C)O',\n    'C[C@]12CC[C@H]3[C@H]([C@@H]1CC[C@@H]2O)CCC4=CC(=O)CC[C@]34C',\n    'C[C@]12CC[C@H]3[C@H]([C@@H]1CC[C@@H]2O)CCC4=C3C=CC(=C4)O',\n    'CC(=O)[C@H]1CC[C@@H]2[C@@]1(CC[C@H]3[C@H]2CCC4=CC(=O)CC[C@]34C)C',\n    'C1=C(C=C(C(=C1I)OC2=CC(=C(C(=C2)I)O)I)I)C[C@@H](C(=O)O)N',\n    'CC(=O)NCCC1=CNC2=C1C=C(C=C2)OC',\n    'CNC[C@@H](C1=CC(=C(C=C1)O)O)O',\n    'CC[C@H](C)[C@H]1C(=O)N[C@H](C(=O)N[C@H](C(=O)N[C@@H](CSSC[C@@H](C(=O)N[C@H](C(=O)N1)CC2=CC=C(C=C2)O)N)C(=O)N3CCC[C@H]3C(=O)N[C@@H](CC(C)C)C(=O)NCC(=O)N)CC(=O)N)CCC(=O)N'   \n]\nmy_df = pd.DataFrame(my_mols, columns=['smiles'])\n</code></pre> <p>Next, we can visualize the DataFrame:</p> Bash<pre><code>%openad show molset using dataframe my_df\n</code></pre> <p></p> <p>As you can see, we don't get much more information than the SMILES and a vizualization. You could open the detail page of any of these molecules and click the \"Enrich\" button to fetch data from PubChem, or a more easy way is to load the molecules into your working set, and enrich them all at once.</p> Bash<pre><code>%openad load molecules from dataframe my_df enrich\n</code></pre> <p>This will take a minute to loop through the molecules, but when you then visualize your working set next, you'll see that you now have an enriched list with all the molecule's names, as well as a bunch of properties that are available on PubChem.</p> Bash<pre><code>%openad show molecules\n</code></pre> <p></p> <p></p>"},{"location":"blog/2025/03/19/visualizing-molecules-in-jupyter-notebook-from-a-list-or-dataframe/#continue-learning","title":"Continue Learning","text":"<p>Want to learn more about how to work with small molecules in OpenAD? Check out the other small molecule tutorials.</p>"},{"location":"blog/2025/03/20/how-to-use-the-molecule-working-set/","title":"How to Use the Molecule Working Set","text":"<p>Your molecule working set (MWS) is an in-memory list of small molecules that is the subject of your calculations and manipulations.</p>"},{"location":"blog/2025/03/20/how-to-use-the-molecule-working-set/#install-openad","title":"Install OpenAD","text":"<p>Find more detailed installation instructions here.</p> Bash<pre><code>pip install openad\n</code></pre> <p>Note</p> <p>To run this tutorial from a Jupyter Notebook, make sure to enable OpenAD magic commands and prepend every command with <code>%openad</code>.</p>"},{"location":"blog/2025/03/20/how-to-use-the-molecule-working-set/#about-the-mws","title":"About the MWS","text":"<p>Your \"Molecule Working Set\" or MWS functions like a bucket where you can add molecules from various sources, to then review, triage or manipulate them together and export them to a new file.</p> <p>Warning</p> <p>When you end your session or restart your Jupyter kernel, the MWS gets erased.</p> <p>At any given time, you can list your molecules, or display them in the GUI (graphical user interface). In the beginning of your session, your MWS will be empty.</p> Bash<pre><code>list molecules\n</code></pre> <p></p> Bash<pre><code>show molecules\n</code></pre> <p></p>"},{"location":"blog/2025/03/20/how-to-use-the-molecule-working-set/#loading-individual-molecules","title":"Loading Individual Molecules","text":"<p>To add the molecule <code>CCCCCC=CC=CC(=O)OCC</code> (Ethyl decadienoate or pear flavor) to your working set, simply run the command below. This will ask for confirmation, then create the molecule and fetch any available data from PubChem.</p> Bash<pre><code>add mol CCCCCC=CC=CC(=O)OCC\n</code></pre> <p>Aside from any valid SMILES or InChI, if a molecule is available on PubChem you can add it by name, InChIKey or PubChem CID.</p> <p>If you're using SMILES or InChI as identifier and you don't need the enrichment from PubChem, you can add the <code>basic</code> clause. And If you prefer to skip the confirmation step, you can add the <code>force</code> clause.</p> <p>Let's add a few more flavors to our molecular fruit salad.</p> <p>Bash<pre><code>add mol InChI=1S/C7H14O2/c1-6(2)4-5-9-7(3)8/h6H,4-5H2,1-3H3 force\n</code></pre> Bash<pre><code>add mol Isobutylbenzene force\n</code></pre> Bash<pre><code>add mol 'ethyl methylphenylglycidate' force\n</code></pre> Bash<pre><code>add mol HUMNYLRZRPPJDN-UHFFFAOYSA-N force\n</code></pre> Bash<pre><code>add mol 21648 force\n</code></pre></p> <p>Now we have pear, banana, cherry, strawberry, cherry and raspberry in our MWS. Let's list our salad.</p> Bash<pre><code>list mols\n</code></pre> <p></p> <p>Or we can inspect them in the GUI.</p> Bash<pre><code>show molecules\n</code></pre> <p></p>"},{"location":"blog/2025/03/20/how-to-use-the-molecule-working-set/#loading-molecules-in-batch","title":"Loading Molecules in Batch","text":"<p>Of course most of the time you'll want to load many molecules at once, sometimes from different file formats. So that's what we'll do.</p> <p>Download the sample files below and copy them into your workspace. Update the file path if needed.</p> <ul> <li>sample_molecules1.sdf</li> <li>sample_molecules2.csv</li> <li>sample_molecules3.smi</li> </ul> <p>Bash<pre><code>import from '~/Downloads/sample_molecules1.sdf' to 'sample_molecules1.sdf'\n</code></pre> Bash<pre><code>import from '~/Downloads/sample_molecules2.csv' to 'sample_molecules2.csv'\n</code></pre> Bash<pre><code>import from '~/Downloads/sample_molecules3.smi' to 'sample_molecules3.smi'\n</code></pre></p> <p>Once the files are in your workspace, you can easily load them into your MWS.</p> <p>Don't forget the <code>append</code> clause.</p> <p>Bash<pre><code>load mols from file 'sample_molecules1.sdf'\n</code></pre> Bash<pre><code>load mols from file 'sample_molecules2.csv' append\n</code></pre> Bash<pre><code>load mols from file 'sample_molecules3.smi' append\n</code></pre></p> <p>Now when you inspect your MWS, you\u2019ll see you have 34 molecules loaded.</p> Bash<pre><code>show molecules\n</code></pre> <p></p>"},{"location":"blog/2025/03/20/how-to-use-the-molecule-working-set/#continue-learning","title":"Continue Learning","text":"<p>Want to learn more about how to work with small molecules in OpenAD? Check out the other small molecule tutorials.</p>"},{"location":"blog/2025/03/21/how-to-generate-molecule-properties--visualize-the-results/","title":"How to Generate Molecule Properties &amp; Visualize the Results","text":"Learn how to use OpenAD in a terminal or Jupyter Notebook to load, organize, visualize and triage your molecule sets. <p>In this tutorial we'll cover:</p> <ol> <li>Collate molecules from a number of SDF, CSV and SMI files</li> <li>Calculate the ESOL property for your molecules ( see note below \u00a0   )</li> <li>Visually inspect and triage the results</li> <li>Export the top candidates into a new file</li> </ol> <p>Note</p> <p>This tutorial will focus exclusively on managing and inspecting your molecules. If you want to learn how to use the OpenAD model service to calculate the ESOL property for your molecules, we will post a separate tutorial for that in the future.</p>"},{"location":"blog/2025/03/21/how-to-generate-molecule-properties--visualize-the-results/#install-openad","title":"Install OpenAD","text":"<p>Find more detailed installation instructions here.</p> Bash<pre><code>pip install openad\n</code></pre> <p>Note</p> <p>To run this tutorial from a Jupyter Notebook, make sure to enable OpenAD magic commands and prepend every command with <code>%openad</code>.</p>"},{"location":"blog/2025/03/21/how-to-generate-molecule-properties--visualize-the-results/#launch-openad-in-the-terminal","title":"Launch OpenAD in the Terminal","text":"Bash<pre><code>openad\n</code></pre>"},{"location":"blog/2025/03/21/how-to-generate-molecule-properties--visualize-the-results/#using-jupyter-notebook","title":"Using Jupyter Notebook","text":"<p>If you plan to use Jupyter notebook, you\u2019ll first have to port our virtual environment to Jupyter.</p> Bash<pre><code>python -m ipykernel install --user --name=ad-venv\n</code></pre> <p></p> <p>After selecting the \u2018ad-venv\u2019 virtual environment in the Jupyter UI, you can now access OpenAD with the use of \u201cmagic commands\u201d.</p> <p>This means you can run any OpenAD command by prepending it with <code>%openad</code>.</p> Bash<pre><code># Command in the CLI\nlist files\n\n# Command in Jupyter Notebook\n%openad list files\n</code></pre>"},{"location":"blog/2025/03/21/how-to-generate-molecule-properties--visualize-the-results/#using-your-molecule-working-set","title":"Using your Molecule Working Set","text":"<p>Your molecule working set (MWS) is an in-memory list of small molecules that is the subject of your calculations and manipulations.</p>"},{"location":"blog/2025/03/21/how-to-generate-molecule-properties--visualize-the-results/#loading-individual-molecules","title":"Loading Individual Molecules","text":"<p>Let\u2019s start with opening your (empty) MWS.</p> Bash<pre><code>show molecules\n</code></pre> <p>Now we\u2019ll add a few individual molecules to your MWS using various identifiers. By default, they will be enriched with data from PubChem.</p> Bash<pre><code>add mol CC(C)Cc1ccccc1 force\nadd mol InChI=1S/C7H16O/c1-5-7(4,8)6(2)3/h6,8H,5H2,1-4H3 force\nadd mol Heptachlor force\nadd mol '3,3-dimethyl-2-butanol' force\n</code></pre> <p>Next you can quickly list your molecules\u2026</p> Bash<pre><code>list molecules\n</code></pre> <p></p> <p>\u2026or inspect them in the GUI.</p> Bash<pre><code>show molecules\n</code></pre> <p></p>"},{"location":"blog/2025/03/21/how-to-generate-molecule-properties--visualize-the-results/#loading-molecules-in-batch","title":"Loading Molecules in Batch","text":"<p>You can load many molecules at once, from different file formats.</p> <p>Download the sample files below and then copy them into your workspace. Update the file path if needed.</p> <ul> <li>sample_molecules1.sdf</li> <li>sample_molecules2.csv</li> <li>sample_molecules3.smi</li> </ul> Bash<pre><code>import from '~/Downloads/sample_molecules1.sdf' to 'sample_molecules1.sdf'\nimport from '~/Downloads/sample_molecules2.csv' to 'sample_molecules2.csv'\nimport from '~/Downloads/sample_molecules3.smi' to 'sample_molecules3.smi'\n</code></pre> <p>Once the files are in your workspace, you can easily load them into your MWS.</p> Bash<pre><code>load mols from file 'sample_molecules1.sdf'\nload mols from file 'sample_molecules2.csv' append\nload mols from file 'sample_molecules3.smi' append\n</code></pre> <p>Now when you inspect your MWS, you\u2019ll see you have 34 molecules loaded.</p> Bash<pre><code>show molecules\n</code></pre>"},{"location":"blog/2025/03/21/how-to-generate-molecule-properties--visualize-the-results/#manipulating-your-molecules","title":"Manipulating Your Molecules","text":"<p>This is the stage where you\u2019d use OpenAD or any other external tool to calculate certain properties or perform any other kind of manipulation.</p> <p>If you\u2019re using a Jupyter Notebook, we can load some example data into your MWS using a dataframe. Let\u2019s assume we have calculated the estimated solubility of our molecules and we have stored the result into a CSV file.</p> <p>Download the sample file below. Please note that this is random data, not actual ESOL values.</p> <p>sample_molecules_esol.csv</p> <p>Now let\u2019s turn this CSV into a dataframe. Paste the code below into a Jupyter Notebook cell and update the file path if necessary.</p> Python<pre><code>import pandas as pd\nfile_path = os.path.join('~/Downloads', 'sample_molecules_esol.csv')\nesol_df = pd.read_csv(file_path)\nesol_df\n</code></pre> <p>We can now add the data from this dataframe to your list of molecules.</p> <p>Please note that your dataframe should have lowercase columns \"smiles\", \"property\" and \"result\" for this command to work.</p> Python<pre><code>%openad merge mols data from dataframe esol_df\n</code></pre> <p>If you now inspect any individual molecules that\u2019s present in your MWS, you\u2019ll see it will have the ESOL property listed.</p> Python<pre><code>%openad show mol CC(C)Cc1ccccc1\n</code></pre> <p></p>"},{"location":"blog/2025/03/21/how-to-generate-molecule-properties--visualize-the-results/#performing-basic-triage","title":"Performing Basic Triage","text":"<p>Now we have the ESOL value for each molecule, we can use the GUI to sort our list by ESOL value and trim it down to the 5 best performing molecules.</p> Bash<pre><code>open molecules\n</code></pre> <ol> <li>First turn on the ESOL property in the \u201cIdentifiers &amp; Properties\u201d box on top.</li> <li>Sort your molecules by their ESOL value.</li> <li>Select the top-five molecules by clicking on the first one and shift-clicking on the last one.</li> <li>Choose Actions &gt; keep selected to delete all other molecules.</li> <li>Choose Actions &gt; save as and choose the format you want to save them as.</li> </ol> <p></p> <p>For further processing within OpenAD, we recommend storing your molecules into our own <code>molset.json</code> format. For export to other applications, you can choose between CSV, SDF or SMI.</p>"},{"location":"documentation/commands/","title":"Commands","text":""},{"location":"documentation/commands/#openad-commands","title":"OpenAD Commands","text":"<p>This is the full list of available commands.</p> <p>Info</p> <p>To run a commands in Jupyter Notebook, prepend it with <code>%openad</code> - more information here.</p>"},{"location":"documentation/commands/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Macromolecules</li> <li>General</li> <li>Workspaces</li> <li>Toolkits</li> <li>Runs</li> <li>Utility</li> <li>GUI</li> <li>LLM</li> <li>File System</li> <li>Help</li> <li>Model</li> </ul> <p>Expand all commands</p>"},{"location":"documentation/commands/#macromolecules","title":"Macromolecules","text":"show mmol|protein &lt;fasta&gt; | '&lt;pdb_id&gt;'  <p>Launch the molecule viewer to visualize your macromolecule and inspect its properties.</p> <p>Examples</p> <p>Show a protein by its PDBe ID: Bash<pre><code>show mmol '2g64'\n</code></pre></p> <p>Show a protein by its FASTA string: Bash<pre><code>show protein MAKWVCKICGYIYDEDAGDPDNGISPGTKFEELPDDWVCPICGAPKSEFEKLED\n</code></pre></p>"},{"location":"documentation/commands/#general","title":"General","text":"openad  <p>Display the openad splash screen.</p>  get status  <p>Display the currently selected workspace and toolkit.</p>  display history  <p>Display the last 30 commands run in your current workspace.</p>  clear sessions  <p>Clear any other sessions that may be running.</p>"},{"location":"documentation/commands/#workspaces","title":"Workspaces","text":"set workspace &lt;workspace_name&gt;  <p>Change the current workspace.</p>  get workspace [ &lt;workspace_name&gt; ]  <p>Display details a workspace. When no workspace name is passed, details of your current workspace are displayed.</p>  create workspace &lt;workspace_name&gt; [ description('&lt;description&gt;') on path '&lt;path&gt;' ]  <p>Create a new workspace with an optional description and path.</p>  remove workspace &lt;workspace_name&gt;  <p>Remove a workspace from your registry. Note that this doesn't remove the workspace's directory.</p>  list workspaces  <p>Lists all your workspaces.</p>"},{"location":"documentation/commands/#toolkits","title":"Toolkits","text":"set context &lt;toolkit_name&gt; [ reset ]  <p>Set your context to the chosen toolkit. By setting the context, the selected toolkit functions become available to you. The optional parameter <code>reset</code> can be used to reset your login information.</p>"},{"location":"documentation/commands/#runs","title":"Runs","text":"create run  <p>Start recording a run.</p>  remove run &lt;run_name&gt;  <p>remove a run.</p>  save run as &lt;run_name&gt;  <p>Stop recording a run and save it.</p>  run &lt;run_name&gt;  <p>Execute a previously recorded run. This will execute every command and continue regardless of any failures.</p>  list runs  <p>List all runs saved in the current workspace.</p>  display run &lt;run_name&gt;  <p>Display the commands stored in a certain run.</p>"},{"location":"documentation/commands/#utility","title":"Utility","text":"display data '&lt;filename.csv&gt;'  <p>Display data from a csv file.</p>  result save [as '&lt;filename.csv&gt;']  <p>Save table data to csv file.</p>  result open  <p>Explore table data in the browser.</p> <p>If you append <code>-d</code> to the end of the command <code>result open -d</code> display will result to data viewer.</p>  result edit  <p>Edit table data in the browser.</p> <p>If you append <code>-d</code> to the end of the command <code>result open -d</code> display will result to data viewer.</p>  result copy  <p>Copy table data to clipboard, formatted for spreadheet.</p>  result display  <p>Display the result in the CLI.</p> <p>If you append <code>-d</code> to the end of the command <code>result open -d</code> display will result to data viewer.</p>  result as dataframe  <p>Return the result as dataframe (only for Jupyter Notebook)</p>  edit config '&lt;json_config_file&gt;' [ schema '&lt;schema_file&gt;']  <p>Edit any JSON file in your workspace directly from the CLI. If a schema is specified, it will be used for validation and documentation.</p>"},{"location":"documentation/commands/#gui","title":"GUI","text":"launch gui  <p>Launch the OpenAD GUI (graphical user interface).</p>  restart gui  <p>Terminate and then restart the GUI server.</p>  quit gui  <p>Terminate the GUI server.</p>"},{"location":"documentation/commands/#llm","title":"LLM","text":"tell me &lt;how to do xyz&gt;  <p>Ask your AI assistant how to do anything in OpenAD.</p>  set llm  &lt;language_model_name&gt;  <p>Set the target language model name for the <code>tell me</code> command.</p>  clear llm auth  <p>Clear the language model's authentication file.</p>"},{"location":"documentation/commands/#file-system","title":"File System","text":"list files [ path ]  <p>List al directories and files in your current workspace.</p>  import from '&lt;external_source_file&gt;' to '&lt;workspace_file&gt;'  <p>Import a file from outside OpenAD into your current workspace.</p>  export from '&lt;workspace_file&gt;' to '&lt;external_file&gt;'  <p>Export a file from your current workspace to anywhere on your hard drive.</p>  copy file '&lt;workspace_file&gt;' to '&lt;other_workspace_name&gt;'  <p>Export a file from your current workspace to another workspace.</p>  remove '&lt;filename&gt;'  <p>Remove a file from your current workspace.</p>  open '&lt;filename&gt;'  <p>Open a file or dataframe in the graphical user interface.</p> <p>Examples</p> <p>Bash<pre><code>open 'base_molecules.sdf'\n</code></pre> Bash<pre><code>open my_dataframe\n</code></pre></p>"},{"location":"documentation/commands/#help","title":"Help","text":"intro  <p>Display an introduction to the OpenAD CLI.</p>  docs  <p>Open the documentation webpage.</p>  ?  <p>List all available commands.</p>  ? ...&lt;soft&gt;  <p>List all commands containing \"...\"</p>  ... ?&lt;soft&gt;  <p>List all commands starting with \"...\"</p>"},{"location":"documentation/commands/#model","title":"Model","text":"model auth list  <p>List authentication groups that have been created.</p>  model auth add group &lt;auth_group&gt; with '&lt;auth_token&gt;'  <p>Create a new authentication group for model services to use.</p> <p>Single quotes are required for your <code>&lt;auth_token&gt;</code> but optional for <code>&lt;auth_group&gt;</code> in case it contains a space or special character.</p> <p>Authorization is required to connect to IBM-hosted models (IBM partners only). Using an auth group allows you to authorize multiple models at once, and is the recommended authorization method.</p> <p>Examples</p> <ol> <li>Copy your authentication token from http://open.accelerate.science (or your custom URL if your company us running its own instance).</li> <li>Create an auth group, e.g. 'default': Bash<pre><code>model auth add group default with '&lt;auth_token&gt;'\n</code></pre></li> <li>Catalog your services with the auth_group provided: Bash<pre><code>model service catalog from remote 'https://open.accelerate.science/proxy' as gen using (inference-service=generation auth_group=default)\n</code></pre></li> </ol> <p>You can also add a cataloged model to a group after you've created it: Bash<pre><code>model auth add service gen to group default\n</code></pre></p>  model auth remove group &lt;auth_group&gt;  <p>Remove an authentication group.</p> <p>Single quotes are optional in case <code>auth_group</code> contains a space or special character.</p> <p>Examples</p> <p>Bash<pre><code>model auth remove group default\n</code></pre> Bash<pre><code>model auth remove group 'my group'\n</code></pre></p>  model auth add service &lt;service_name&gt; to group &lt;auth_group&gt;  <p>Ad a model service to an authentication group.</p> <p>Single quotes are optional for both <code>&lt;service_name&gt;</code> and <code>&lt;auth_group&gt;</code> in case they contain a space or special character.</p> <p>Examples</p> <p>Bash<pre><code>model auth add service molf to group default\n</code></pre> Bash<pre><code>model auth add service 'my molf' to group 'my group'\n</code></pre></p>  model auth remove service &lt;service_name&gt;  <p>Detach a model service from an authentication group.</p> <p>Single quotes are optional in case <code>service_name</code> contains a space or special character.</p> <p>Examples</p> <p>Bash<pre><code>model auth remove service molf\n</code></pre> Bash<pre><code>model auth remove service 'my molf'\n</code></pre></p>  model service status  <p>Get the status of your currently cataloged services.</p>  model service describe &lt;service_name&gt;  <p>Get a service's configuration details.</p> <p>Single quotes are optional in case <code>service_name</code> contains a space or special character.</p> <p>Examples</p> <p>Bash<pre><code>model service describe gen\n</code></pre> Bash<pre><code>model service describe 'my gen'\n</code></pre></p>  model catalog list  <p>List your currently cataloged services.</p>  uncatalog model service &lt;service_name&gt;  <p>Uncatalog a model service.</p> <p>Single quotes are optional in case <code>service_name</code> contains a space or special character.</p> <p>Examples</p> <p>Bash<pre><code>uncatalog model service 'gen'\n</code></pre> Bash<pre><code>uncatalog model service 'my gen'\n</code></pre></p>  catalog model service from [ remote ] '&lt;path&gt;|&lt;github&gt;|&lt;service_url&gt;' as &lt;service_name&gt; USING (&lt;parameter&gt;=&lt;value&gt; &lt;parameter&gt;=&lt;value&gt;)  <p>Catalog a model service from a local path, from GitHub or from an hosted service URL.</p> <p>Use the <code>remote</code> clause when cataloging from a hosted service URL.</p> <p>Parameters</p> <p><code>&lt;path&gt;|&lt;github&gt;|&lt;service_url&gt;</code>     The location of the model service, to be provided in single quotes.     This can be a local path, a GitHub SSH URI, or a URL for an existing remote service:     <code>&lt;soft&gt;...&lt;/soft&gt;from '/path/to/service'</code> <code>&lt;soft&gt;...&lt;/soft&gt;from 'git@github.com:acceleratedscience/generation_inference_service.git'</code> <code>&lt;soft&gt;...&lt;/soft&gt;from remote '0.0.0.0:8080'</code> // Note: 'remote' is required for cataloging a remote service</p> <p><code>&lt;service_name&gt;</code>     How you will be refering to the service when using it. Keep it short, e.g. <code>prop</code> for a service that calculates properties.     Single quotes are optional in case you want to used a space or special character.</p> <p>The USING Clause</p> <p>The parameters below are only needed when connecting to an IBM-hosted service (IBM partners only).</p> <p><code>inference-service=&lt;string&gt;</code> (required)     The name of the inference service you want to connect to, eg. generation ot molformer. Authorization:     To authorize to an IBM-hosted service (IBM partners only), you have two options:     1. <code>authorization='&lt;auth_token&gt;'</code>         Provide your authorzation token directly.         Note: to use this option, <code>auth_group</code> can not be defined.     2. <code>auth_group=&lt;auth_group_name&gt;</code>         The name of an authorization group which contains your <code>auth_token</code>.         This is recommended if you will be using more than one model service.         For instructions on how to set up an auth group, run <code>model auth add group ?</code>         Note: to use this option, <code>authorization</code> can not be defined.</p> <p>Examples</p> <p>Catalog a model using SkyPilot deployment Bash<pre><code>catalog model service from 'git@github.com:acceleratedscience/generation_inference_service.git' as gen\n</code></pre></p> <p>Catalog a model using a authentication group Bash<pre><code>catalog model service from remote 'https://open.accelerate.science/proxy' as molf USING (inference-service=molformer auth_group=default)\n</code></pre></p> <p>Catalog a model using an authorization token Bash<pre><code>openad catalog model service from remote 'https://open.accelerate.science/proxy' as gen USING (inference-service=generation authorization='&lt;auth_token&gt;')\n</code></pre></p> <p>Catalog a remote service that was shared with you: Bash<pre><code>catalog model service from remote 'http://54.235.3.243:3001' as gen\n</code></pre></p>  model service up &lt;service_name&gt; [ no_gpu ]  <p>Launch a model service, after it was cataloged using <code>model service catalog</code>.</p> <p>Single quotes are optional in case <code>service_name</code> contains a space or special character.</p> <p>If you don't want your service to use GPU you can append the <code>no_gpu</code> clause.</p> <p>Examples</p> <p>Bash<pre><code>model service up gen\n</code></pre> Bash<pre><code>model service up 'my gen'\n</code></pre> Bash<pre><code>model service up gen no_gpu\n</code></pre></p>  model service local up &lt;service_name&gt; [ no_gpu ]  <p>Launch a model service locally.</p> <p>Single quotes are optional in case <code>service_name</code> contains a space or special character.</p> <p>If you don't want your service to use GPU you can append the <code>no_gpu</code> clause.</p> <p>Examples</p> <p>Bash<pre><code> model service local up gen\n</code></pre> Bash<pre><code> model service local up 'my gen'\n</code></pre> Bash<pre><code> model service local up gen no_gpu\n</code></pre></p>  model service down &lt;service_name&gt;  <p>Deactivate a model service.</p> <p>Single quotes are optional in case <code>service_name</code> contains a space or special character.</p> <p>Examples</p> <p>Bash<pre><code>model service down gen\n</code></pre> Bash<pre><code>model service down 'my gen'\n</code></pre></p>  get model service &lt;service_name&gt; result '&lt;result_id&gt;'  <p>Retrieve a result from a model service.</p> <p>This is for async inference, which will return a <code>&lt;result_id&gt;</code> instead of a result.</p> <p>Single quotes are optional in case <code>service_name</code> contains a space or special character.</p> <p>Examples</p> <p>Bash<pre><code>get model service gen result 'xyz'\n</code></pre> Bash<pre><code>get model service 'my gen' result 'xyz'\n</code></pre></p>"},{"location":"documentation/developers/","title":"OpenAD for Developers","text":"<p>OpenAD is fully open source and we encourage contributions. If you have any questions, please get in touch.</p>"},{"location":"documentation/developers/#developing-plugins","title":"Developing Plugins","text":"<p>Building your own OpenAD plugin lets you to integrate your own tools into the OpenAD workflow. Stay tuned here for documentation on how to do this.</p> <p>Note</p> <p>We will be publishing a detailed developer tutorial soon. Come back in a few weeks.</p>"},{"location":"documentation/developers/#installation-for-development","title":"Installation for Development","text":"Install using the setup wizard (uses poetry) <ol> <li> <p>Step 1: Download the repo</p> Bash<pre><code>git clone https://github.com/acceleratedscience/open-ad-toolkit.git\n</code></pre> <p>Or to download a specific branch, you can run instead:</p> Bash<pre><code>git clone -b &lt;branch_name&gt; https://github.com/acceleratedscience/open-ad-toolkit.git\n</code></pre> </li> <li> <p>Step 2: Launch the setup wizard</p> Bash<pre><code>cd open-ad-toolkit\n./setup.sh\n</code></pre> </li> </ol> Install using pip <ol> <li> <p>Step 0: Before you start     Ensure you're running Python 3.10.10+ or 3.11 - see Upgrading Python.</p> <p>To see what version you are running:</p> Bash<pre><code>python -V\n</code></pre> <p>Note: Due to an issue with one of our dependencies, Python 3.12 is not yet supported.</p> </li> <li> <p>Step 1: Set up your virtual environment (recommended)</p> Bash<pre><code>python -m venv ~/ad-venv\nsource ~/ad-venv/bin/activate\n</code></pre> <p>Note: Use <code>python3</code> on macOS. Note: To exit the virtual environment, you can run <code>deactivate</code></p> </li> <li> <p>Step 2: Download the repo</p> Bash<pre><code>git clone https://github.com/acceleratedscience/open-ad-toolkit.git\n</code></pre> <p>Or to download a specific branch, you can run instead:</p> Bash<pre><code>git clone -b &lt;branch_name&gt; https://github.com/acceleratedscience/open-ad-toolkit.git\n</code></pre> </li> <li> <p>Step 2: Install OpenAD</p> Bash<pre><code>cd open-ad-toolkit\npip install -e .\n</code></pre> <p>Note: The -e flag stands for \"editable\". This means that instead of copying the package's files to the Python site-packages directory as in a regular installation, pip creates a symbolic link (symlink) from your package's source code directory into your Python environment. This way you can make changes to the source code of the package, and those changes are immediately reflected in your Python environment. You don't need to reinstall the package every time you make a change.</p> </li> </ol>"},{"location":"documentation/developers/#testing-a-branch","title":"Testing a branch","text":"<p>To do a regular install from a particular branch, you can run:</p> Bash<pre><code>pip install git+https://github.com/acceleratedscience/open-ad-toolkit.git@&lt;branch_name&gt;\n</code></pre> <p></p>"},{"location":"documentation/getting-started/","title":"Getting Started with OpenAD","text":""},{"location":"documentation/getting-started/#tldr","title":"Tl;dr","text":"<p>Get started in your terminal:</p> Bash<pre><code>openad\n</code></pre> <p>Get started with Jupyter Notebook examples:</p> <p>Bash<pre><code>init_magic\n</code></pre> Bash<pre><code>init_examples\n</code></pre> Bash<pre><code>jupyter lab ~/openad_notebooks/Table_of_Contents.ipynb\n</code></pre></p> <p>Warning</p> <p>If you get an error when running <code>init_magic</code>, you may first need to setup the default iPython profile for magic commands.</p> Bash<pre><code>ipython profile create\n</code></pre>"},{"location":"documentation/getting-started/#getting-started-cli","title":"Getting Started - CLI","text":"<ul> <li> <p>Enter the virtual environment</p> Bash<pre><code>source ~/ad-venv/bin/activate\n</code></pre> </li> <li> <p>Enter the command shell</p> <p>Here you'll find further instructions on how to use OpenAD.</p> Bash<pre><code>openad\n</code></pre> <p> </p> </li> <li> <p>Exit the command shell     Hit <code>ctrl+c</code> or run:</p> Bash<pre><code>exit\n</code></pre> </li> <li> <p>Run a single command from outside the command shell</p> Bash<pre><code>openad &lt;command&gt;\n</code></pre> </li> <li> <p>Exit the virtual environment</p> Bash<pre><code>deactivate\n</code></pre> </li> <li> <p>Running Bash Commands</p> <p>To run a command in bash mode, prepend it with <code>openad</code> and make sure to escape quotes.</p> Bash<pre><code>openad show molecules using file \\'base_molecules.sdf\\'\n</code></pre> </li> </ul>"},{"location":"documentation/getting-started/#getting-started-jupyter","title":"Getting Started - Jupyter","text":""},{"location":"documentation/getting-started/#setting-up-jupyter","title":"Setting up Jupyter","text":"<p>The following commands only need to be run once after installation:</p> <ol> <li> <p>Activate your virtual environment</p> Bash<pre><code>source ~/ad-venv/bin/activate\n</code></pre> </li> <li> <p>Create an iPython kernel     This ports your virtual environment to Jupyter.</p> Bash<pre><code>python -m ipykernel install --user --name=ad-venv\n</code></pre> <p>Note: List your installed iPython kernels: <code>jupyter kernelspec list</code> Remove a kernel: <code>jupyter kernelspec uninstall ad-venv</code></p> </li> <li> <p>Install the magic commands     This enables OpenAD commands to be run within a Jupyter Notebook.</p> Bash<pre><code>init_magic\n</code></pre> <p> Alternative: Manually add magic commands <p>If you don't want to activate magic commands in all Notebooks, you can instead activate them for individual Notebooks.</p> <p></p> <ul> <li>Run <code>init_examples</code></li> <li>Copy the file <code>~/openad_notebooks/openad.ipynb</code> to the same directory as the Notebook you wish to activate.</li> <li>In your Notebook, run this inside a code cell: <code>!run openad.ipynb</code></li> </ul> <p> </p> <li> <p>Install example Notebooks     This installs our example Notebooks at <code>~/openad_notebooks</code>.</p> Bash<pre><code>init_examples\n</code></pre> </li> <p></p>"},{"location":"documentation/getting-started/#launching-openad-in-jupyter","title":"Launching OpenAD in Jupyter","text":"<ol> <li> <p>Open any Notebook     Launch Jupyter lab to create a fresh notebook, or get started with our example Notebook:</p> <p>Bash<pre><code>jupyter lab\n</code></pre> Bash<pre><code>jupyter lab ~/openad_notebooks/Table_of_Contents.ipynb\n</code></pre></p> </li> <li> <p>Select the kernel     Make sure to select the \"ad-venv\" iPython kernel you just created. You can do this under Kernel &gt; Change Kernel, or by clicking the kernel name in the top right hand corner. If you don't see your iPython kernel, make sure you followed the Jupyter Setup instructions listed above.</p> <p></p> </li> <li> <p>Magic Commands     Magic commands let you access any OpenAD CLI command from within Jupyter. They are invoked by the <code>%openad</code> prefix. Try listing your files as a test:</p> Python<pre><code>%openad list files\n</code></pre> <p>If you wish to retrieve data from an OpenAD command, you can use the <code>%openadd</code> prefix instead. This will return raw, unstyled data for further processing. For example:</p> Python<pre><code>my_data = %openadd display data 'my_data_file.csv'\n\nfor item in my_data:\n    print(item.smiles)\n</code></pre> <p>To see the available commands, you consult the Commands page, or you can request inline help:</p> Python<pre><code>%openad ?\n</code></pre> </li> </ol>"},{"location":"documentation/installation/","title":"Installing OpenAD","text":""},{"location":"documentation/installation/#tldr","title":"Tl;dr","text":"Bash<pre><code>pip install openad\n</code></pre> Bash<pre><code>openad\n</code></pre> <p>Info</p> <p>When installing on macOS without a virtual environment, you may need to use <code>python3</code> and <code>pip3</code> instead of <code>python</code> and <code>pip</code>.</p>"},{"location":"documentation/installation/#installing-on-macos-linux","title":"Installing on macOS / Linux","text":"<p>Info</p> <ul> <li>Contributors: Skip to Installation for Development</li> <li>Linux users: Check the Linux Notes</li> <li>Poetry: If you prefer Poetry, you can run the setup wizard instead: <code>poetry add openad</code></li> </ul> <ol> <li> <p>Before you start     Ensure you're running Python 3.10.10+ or 3.11 - see Upgrading Python.</p> <p>To see what version you are running:</p> Bash<pre><code>python -V\n</code></pre> <p>Note: Due to an issue with one of our dependencies, Python 3.12 is not yet supported.</p> </li> <li> <p>Set up your virtual environment (recommended)</p> Bash<pre><code>python -m venv ~/ad-venv\n</code></pre> Bash<pre><code>source ~/ad-venv/bin/activate\n</code></pre> <p>Note: Use <code>python3</code> on macOS. Note: To exit the virtual environment, you can run <code>deactivate</code></p> </li> <li> <p>Install OpenAD</p> Bash<pre><code>pip install openad\n</code></pre> </li> <li> <p>Continue to Getting Started</p> </li> </ol>"},{"location":"documentation/installation/#installing-on-windows","title":"Installing on Windows","text":"<p>In order to run OpenAD on Windows 11, you will need to install the Ubuntu WSL package.</p> <ol> <li> <p>Verify Windows version     To check if you are running Windows 11 or later, press <code>Win</code> + <code>R</code>, type \"winver\", and press <code>Enter</code>. A window will open showing your Windows version.</p> </li> <li> <p>Verify WSL     To check if you already have WSL installed, run <code>wsl -l -v</code> into the terminal. To see more information about your current version of Ubuntu, run <code>lsb_release -a</code></p> </li> <li> <p>Install WSL     Install WSL and create a user called 'openad' or one of your choosing.</p> Bash<pre><code>wsl --install Ubuntu-22.04\n</code></pre> <p>Optional: To setup an Ubuntu Python environment from scratch, continue to Linux Notes</p> </li> <li> <p>Continue to Getting Started</p> </li> </ol>"},{"location":"documentation/installation/#appendix","title":"Appendix","text":""},{"location":"documentation/installation/#upgrading-python","title":"Upgrading Python","text":"<p>There's many ways to install or upgrade Python. We'll use <code>pyenv</code>.</p> <ol> <li> <p>Install pyenv</p> Bash<pre><code>curl https://pyenv.run | bash\n</code></pre> </li> <li> <p>Set up your shell environment for Pyenv     Detailed instructions cam be found here. If you're using Zsh, you can run the commands below:</p> Bash<pre><code>echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' &gt;&gt; ~/.zshrc\necho '[[ -d $PYENV_ROOT/bin ]] &amp;&amp; export PATH=\"$PYENV_ROOT/bin:$PATH\"' &gt;&gt; ~/.zshrc\necho 'eval \"$(pyenv init -)\"' &gt;&gt; ~/.zshrc\n</code></pre> </li> <li> <p>Reboot your shell     You can either open a new window or run:</p> Bash<pre><code>exec $SHELL\n</code></pre> </li> <li> <p>Install Python     Please note that OpenAD requires Python 3.10.10+ or 3.11.     Due to an issue with one of our dependencies, Python 3.12 is not yet supported.</p> Bash<pre><code>pyenv install 3.11\n</code></pre> </li> <li> <p>Activate this version of Python     If you wish to set this version as the default:</p> Bash<pre><code>pyenv global 3.11\n</code></pre> <p>Alternatively, if you only wish to activate it in the current shell:</p> Bash<pre><code>pyenv shell 3.11\n</code></pre> </li> </ol>"},{"location":"documentation/installation/#linux-notes","title":"Linux Notes","text":"<p>If you wish to setup an Ubuntu Python environment from scratch, run:</p> Bash<pre><code>sudo add-apt-repository ppa:deadsnakes/ppa\nsudo apt update\nsudo apt install python3.11-full\nsudo apt install python3-pip\nsudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 100\nsudo pip install pip --upgrade\n</code></pre> <p>You will need to restart your Linux session before running <code>pip install openad</code> so that the python libraries are in your path.</p> <p>If you get an error when running <code>init_magic</code>, you may first need to setup the default iPython profile for magic commands.</p> Bash<pre><code>ipython profile create\n</code></pre>"},{"location":"documentation/plugins/","title":"OpenAD Plugins","text":"<p>Plugins provide drastically simplified access to a series of advanced tools, and make it easy for your own Python applications to interface with OpenAD.</p>"},{"location":"documentation/plugins/#creating-your-own-plugin","title":"Creating Your Own Plugin","text":"<p>Creating your own plugins is easy if you have a basic understanding of Python. With only a few steps you can expose your own projects (or your favorite tools) to access OpenAD's powerful visualisation capabilities and more.</p> <p>Note</p> <p>We will be publishing a detailed developer tutorial soon. Come back in a few weeks.</p>"},{"location":"documentation/plugins/#available-plugins","title":"Available Plugins","text":"<p>Currently there are two publicly available plugins available.</p> <ol> <li> <p>Deep Search     Find molecules by similarity or substructure, scan patents for molecules and vice versa and search across available Deep Search collections.</p> Bash<pre><code>pip install git+https://github.com/acceleratedscience/openad-plugin-ds\n</code></pre> <p>For more information visit the openad-plugin-ds repo.</p> </li> <li> <p>RXN     Predict chemical reactions, retrosynthesis pathways and experimental procedures.</p> Bash<pre><code>pip install git+https://github.com/acceleratedscience/openad-plugin-rxn\n</code></pre> <p>For more information visit the  openad-plugin-rxn repo.</p> </li> </ol>"},{"location":"documentation/tell-me/","title":"OpenAD Tell Me","text":"<p>The \"Tell Me\" function lets you inquire an LLM on how to do certain things with OpenAD.</p> <p>Info</p> <ul> <li>Supported LLMs Ollama</li> <li>Ollama requires an 8GB GPU.</li> </ul>"},{"location":"documentation/tell-me/#ollama-setup","title":"Ollama Setup","text":"<ol> <li> <p>Install Ollama onto your platform.</p> </li> <li> <p>Download the appropriate models.</p> <p>Bash<pre><code>ollama pull granite3.1-dense:8b-instruct-q4_1\n</code></pre> Bash<pre><code>ollama pull all-minilm:l6-v2\n</code></pre></p> </li> <li> <p>Start the server if not already started.</p> Bash<pre><code>ollama serve\n</code></pre> </li> </ol> <p>That's it for local usage. If you want to run Ollama remotely, continue below.</p>"},{"location":"documentation/tell-me/#ollama-remote-setup-with-skypilot","title":"Ollama Remote Setup with SkyPilot","text":"<ol> <li> <p>Check out our configuration file to launch ollama on SkyPilot: ollama_setup.yaml</p> Bash<pre><code>sky serve up ollama_setup.yaml\n</code></pre> </li> <li> <p>Set up local environment variables</p> <ul> <li>For windows <code>setx OLLAMA_HOST=&lt;sky-server-ip&gt;:11434</code></li> <li>For Linux and macOS <code>export OLLAMA_HOST=&lt;sky-server-ip&gt;:11434</code></li> <li>To reset to local use <code>OLLAMA_HOST=0.0.0.0:11434</code></li> </ul> </li> </ol>"},{"location":"documentation/tell-me/#run-ollama","title":"Run Ollama","text":"<p>Note: If prompted for an API key and none was setup, just leave the input empty.</p> <p>Bash<pre><code>set llm ollama\n</code></pre> Bash<pre><code>tell me &lt;enter prompt&gt;\n</code></pre></p>"},{"location":"documentation/troubleshooting/","title":"Troubleshooting","text":"<p>Here are some common problems you may come across:</p> <ul> <li>When updating to OpenAD <code>0.4.0</code> or above, first remove all toolkits by runnning <code>list toolkits</code> and then <code>remove toolkit &lt;toolkit_name&gt;</code>.</li> <li>If you can't get openAD to run, try deleting the <code>~/.openad</code> directory, especially if you have run older versions of OpenAD in the past. Make sure to back up your workspaces if you want to keep your files.</li> <li>When installing on macOS without a virtual environment, you may need to use <code>python3</code> and <code>pip3</code> instead of <code>python</code> and <code>pip</code>.</li> <li>Ensure you're running Python 3.10.10+ or 3.11 - see Upgrading Python. Due to an issue with one of our dependencies, Python 3.12 is not yet supported.</li> </ul>"},{"location":"documentation/model-service/about/","title":"OpenAD Model Service","text":"<p>Run machine learning models without the technical overhead.</p> <p>  Deploy ML models as services with minimal setup.  Focus on using models, not managing infrastructure.  Run inference in the cloud instead of locally.  Seamless integration with OpenAD Toolkit CLI and notebooks.</p>"},{"location":"documentation/model-service/about/#prepackaged-models-easy","title":"Prepackaged Models Easy","text":"<p>Learn how to set up one of our open-source models:</p> <ul> <li>On your local machine</li> <li>Containerized using Docker or Podman</li> <li>Deployed to AWS using SkyPilot</li> </ul>"},{"location":"documentation/model-service/about/#wrapping-new-models-advanced","title":"Wrapping New Models Advanced","text":"<p>Learn how wrap any model for use with OpenAD.</p>"},{"location":"documentation/model-service/about/#connecting-to-ibm-hosted-models-ibm-partners","title":"Connecting to IBM-hosted Models IBM Partners","text":"<p>Connect directly to the IBM-hosted plug-and-play models. Only available to IBM partners.</p>"},{"location":"documentation/model-service/ibm-hosted/","title":"Connecting to IBM-hosted Models","text":"<p>This service is for registered IBM partners only. Before you continue, make sure you know who your group admin is.</p> <p>Note</p> <p>For more information about becoming an IBM partner, get in touch.</p>"},{"location":"documentation/model-service/ibm-hosted/#step-1-register-at-the-openad-portal","title":"Step 1: Register at the OpenAD Portal","text":"<ol> <li> <p>Log in to the OpenAD Portal     Go to open.accelerate.science and log in with your IBMid, create one if necessary.     You'll see: \"Your account is pending to be added to a group\"</p> <p></p> </li> <li> <p>Request Group Assignment     Log out and contact your group administrator.     They will add you to the appropriate group.</p> </li> <li> <p>Verify Account Setup     Log in again after receiving confirmation.     Your group and role should be displayed.</p> </li> </ol>"},{"location":"documentation/model-service/ibm-hosted/#step-2-generate-access-token","title":"Step 2: Generate Access Token","text":"<ol> <li>Navigate to the Access Token tab</li> <li>Click Generate Token</li> <li> <p>Click anywhere on the token to copy it, you'll need it later</p> <p>Warning</p> <p>Treat your token like a password. It grants full access to the system under your credentials.</p> </li> </ol>"},{"location":"documentation/model-service/ibm-hosted/#step-3-connect-to-a-model","title":"Step 3: Connect to a Model","text":"<p>If you haven't already, install OpenAD.</p>"},{"location":"documentation/model-service/ibm-hosted/#31-choose-a-model","title":"3.1. Choose a model","text":"<p>To see what model subscriptions you have access to, check the Your Subscriptions tab in the OpenAD Portal.</p> <p></p>"},{"location":"documentation/model-service/ibm-hosted/#32-configure-authentication","title":"3.2. Configure Authentication","text":"<p>Replace <code>YOUR_ACCESS_TOKEN</code> with your actual access token that you copied earlier.</p> Bash<pre><code>model auth add group default with 'YOUR_ACCESS_TOKEN'\n</code></pre>"},{"location":"documentation/model-service/ibm-hosted/#33-connect-to-a-model","title":"3.3. Connect to a Model","text":"<p>In this example we'll connect to the molformer model.</p> Bash<pre><code>catalog model service from remote 'https://open.accelerate.science/proxy' as molformer using (auth_group=default inference-service=molformer)\n</code></pre>"},{"location":"documentation/model-service/ibm-hosted/#understanding-the-connection-command","title":"Understanding the Connection Command","text":"Command Component Description <code>catalog model service from remote</code> Connects to a model via URL <code>'https://open.accelerate.science/proxy'</code> The endpoint for model inference <code>'molformer'</code> Your chosen name for this service <code>USING (auth_group=default ...)</code> References your authentication group <code>USING (... inference-service=molformer)</code> The model subscription name"},{"location":"documentation/model-service/ibm-hosted/#step-4-verify-the-connection","title":"Step 4: Verify the Connection","text":"Bash<pre><code>model service status\n</code></pre> <p>Expected output:</p> Text Only<pre><code>Service    Status     Endpoint                               Host    Token Expires\n---------  ---------  -------------------------------------  ------  -----------------\nmolformer  Connected  https://open.accelerate.science/proxy  remote  Wed Sep 11, 2030\n</code></pre>"},{"location":"documentation/model-service/ibm-hosted/#step-5-explore-available-model-functions","title":"Step 5: Explore Available Model Functions","text":"Bash<pre><code>molformer ?\n</code></pre> <p>You'll see available commands for the model:</p> Text Only<pre><code>Commands starting with \"molformer\"\n- molformer get molecule property molformer_classification for [&lt;list of SMILES&gt;] | &lt;SMILES&gt; USING (&lt;parameter&gt;=&lt;value&gt; &lt;parameter&gt;=&lt;value&gt;) (save_as '&lt;filename.csv&gt;')\n- molformer get molecule property molformer_multitask_classification for [&lt;list of SMILES&gt;] | &lt;SMILES&gt; USING (&lt;parameter&gt;=&lt;value&gt; &lt;parameter&gt;=&lt;value&gt;) (save_as '&lt;filename.csv&gt;')\n- molformer get molecule property molformer_regression for [&lt;list of SMILES&gt;] | &lt;SMILES&gt; USING (&lt;parameter&gt;=&lt;value&gt; &lt;parameter&gt;=&lt;value&gt;) (save_as '&lt;filename.csv&gt;')\n</code></pre>"},{"location":"documentation/model-service/ibm-hosted/#step-6-run-model-inference","title":"Step 6: Run Model Inference","text":"Bash<pre><code>molformer get molecule property molformer_classification for 'OC12COC3=NCC1C23'\n</code></pre> <p>Expected output:</p> Text Only<pre><code>subject           property                  result\n----------------  ------------------------  --------\nOC12COC3=NCC1C23  molformer_classification  [1]\n</code></pre>"},{"location":"documentation/model-service/ibm-hosted/#command-documentation","title":"Command Documentation","text":"<p>See all command related to the model service:</p> Bash<pre><code>model ?\n</code></pre> <p>To see detailed documentation for any individual command, append a <code>?</code> to the unique beginning of the command:</p> Bash<pre><code>model auth add group ?\n</code></pre>"},{"location":"documentation/model-service/ibm-hosted/#best-practices","title":"Best Practices","text":"<ul> <li>Store important results using the <code>save_as</code> parameter.     Alternatively, you use a follow-up command: <code>result save</code></li> <li>Use descriptive service names when connecting to models.</li> <li>Organize multiple models and authentication groups logically.</li> <li>Back up your access token securely.</li> </ul>"},{"location":"documentation/model-service/ibm-hosted/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Connection Issues: Verify your token has not expired and the inference URL is correct.</li> <li>Authentication Errors: Regenerate your token if necessary.</li> <li>Model Not Available: Check your dashboard for available model subscriptions.</li> <li>Model misspelled: Make sure there is no typo in the <code>inference-service</code> parameter.</li> <li>Command Syntax Errors: Use the <code>?</code> command to verify proper syntax.</li> </ul>"},{"location":"documentation/model-service/prepackaged-models/","title":"Setting Up a Model","text":"<p>Warning</p> <p>Documentation is incomplete and may be inacurate.</p>"},{"location":"documentation/model-service/prepackaged-models/#options","title":"Options","text":"<p>There's different ways to running our models, depending on your needs.</p> <ol> <li>Runninig a model locally Quick setup, low overhead, slow performance</li> <li>Containerize a model Deploy your model anywhere using Docker or Podman</li> <li>Deploy to SkyPilot on AWS Leverage cloud computing power</li> </ol>"},{"location":"documentation/model-service/prepackaged-models/#available-models","title":"Available Models","text":"<p>Note</p> <p>More models are available, documentation will be added in the coming days.</p> <p>GT4SD - Generation inference</p> Text Only<pre><code>git@github.com:acceleratedscience/generation_inference_service.git\n</code></pre> <p>Documentation on GitHub</p> <p>GT4SD - Property inference</p> Text Only<pre><code>git@github.com:acceleratedscience/property_inference_service.git\n</code></pre> <p>Documentation on GitHub</p> <p>GT4SD - MoleR inference</p> Text Only<pre><code>git@github.com:acceleratedscience/moler_inference_service.git\n</code></pre> <p>Documentation on GitHub</p> <p>GT4SD - Molformer inference</p> Text Only<pre><code>git@github.com:acceleratedscience/molformer_inference_service.git\n</code></pre> <p>Documentation on GitHub</p>"},{"location":"documentation/model-service/prepackaged-models/#running-a-model-locally","title":"Running a Model Locally","text":"<p>Note</p> <p>Apologies, we're still working on this part of the documentation. Come back in a few days.</p>"},{"location":"documentation/model-service/prepackaged-models/#containerizing-a-model","title":"Containerizing a Model","text":"<p>Note</p> <p>Apologies, we're still working on this part of the documentation. Come back in a few days.</p>"},{"location":"documentation/model-service/prepackaged-models/#deploying-to-skypilot-on-aws","title":"Deploying to SkyPilot on AWS","text":""},{"location":"documentation/model-service/prepackaged-models/#setting-up-skypilot","title":"Setting up SkyPilot","text":"<ol> <li> <p>AWS account <ul> <li>Head to aws.com</li> <li>Click the [Create an AWS Account] button in the top right corner</li> <li>Follow instructions, including setting up a root user</li> </ul> <p> </p> <li> <p>AWS user with correct permissions <p>Starting from your AWS dashboard:</p> <ul> <li>Search for \"IAM\" in the search bar</li> <li>From your IAM dashboard, click \"Users\" in the lefthand sidebar</li> <li>Click the [Create user] button in the top right hand corner</li> <li>Leave the \"Provide user access to the AWS Management Console\" box unchecked</li> <li>Up next on the \"Set Permissions\" screen, select the third option: \"Attach policies directly\"</li> <li>In the box below, click the [Create policy] button</li> <li>Create a new policy with minimal permissions for Skypilot, following thye Skypilot instructions</li> <li>On the next screen, search for the policy you just created, which would be called <code>minimal-skypilot-policy</code> per the instructions</li> <li>Finish the process to attach the policy to your user</li> </ul> <p> </p> <li> <p>AWS Access key <p>Starting from the IAM dashboard:</p> <ul> <li>Click \"Users\" in the lefthand sidebar</li> <li>Click on the user you created in the previous step</li> <li>Click \"Create access key\" on the right side of the summary on top</li> <li>Select the first option, \"Command Line Interface (CLI)\" as use case</li> <li>Finish the process to create the access key</li> <li>Store the secret access key in your password manager, as you will not be able to access it after creation</li> </ul> <p> </p> <li> <p>AWS command line tool <p>Starting from a terminal window:</p> <ul> <li> <p>Install awscli</p> Bash<pre><code>python -m pip install awscli\n</code></pre> <p>Note: For more nuanced instructions, please refer to pypi</p> </li> <li> <p>Add the credentials for the AWS user you set up in step 3.</p> Bash<pre><code>aws configure\n</code></pre> <ul> <li>Your user's access key can be found in your IAM dashboard &gt; Users, however the secret access key should have been stored in your password manager or elsewhere.</li> <li>The fields \"Default region name\" and \"Default output format\" can be left blank</li> </ul> </li> </ul> <p> </p> <li> <p>SkyPilot <p>SkyPilot is a framework for running AI and batch workloads on any infrastructure. We're using AWS.</p> <p>Starting from a terminal window:</p> <ul> <li> <p>If you are running OpenAD in a virtual environment, make sure your virtual environment is activated. If you followed the default installation instructions, you should be able to run:</p> Bash<pre><code>source ~/ad-venv/bin/activate\n</code></pre> </li> <li> <p>Install Skypilot for AWS</p> Bash<pre><code>pip install \"skypilot[aws]\"\n</code></pre> </li> <li> <p>After installation, verify if you have cloud access</p> Bash<pre><code>sky check\n</code></pre> </li> </ul> <p> </p>"},{"location":"documentation/model-service/prepackaged-models/#spinning-up-a-model","title":"Spinning Up a Model","text":"<ol> <li> <p>Install any service by its url (see available models on top), for example the property inference service:</p> Bash<pre><code>catalog model service from 'git@github.com:acceleratedscience/property_inference_service.git' as prop\n</code></pre> </li> <li> <p>Start the service \u2013 this can take up to 10 minutes</p> Bash<pre><code>model service up prop\n</code></pre> </li> <li> <p>Check if the service is ready</p> Bash<pre><code>model service status\n</code></pre> </li> <li> <p>Shut down the service</p> Bash<pre><code>model service down prop\n</code></pre> </li> <li> <p>To see all available model commands, pull up the general help and look towards the bottom of the command list.</p> Bash<pre><code>?\n</code></pre> </li> </ol>"},{"location":"documentation/model-service/wrapping/","title":"Wrapping New Models","text":"<p>You can make any molecular ML model work with OpenAD. You simply need to \"wrap it\" to provide it with a standardized API that can be understood by OpenAD.</p> <p>You can find detailed instructions for this in the model wrapping repository.</p> <p>Go to openad_service_utils</p>"},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/category/tutorials/","title":"Tutorials","text":""},{"location":"blog/category/proteins/","title":"Proteins","text":""},{"location":"blog/category/visualization/","title":"Visualization","text":""},{"location":"blog/category/small-molecules/","title":"Small Molecules","text":""},{"location":"blog/category/general/","title":"General","text":""}]}